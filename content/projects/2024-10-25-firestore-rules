+++
authors = ["Lone Coder"]
title = "Firesbase Rules for Instagram Clone Project"
date = "2024-10-25"
description = "Firestore and storage rules for Instagram clone project"
tags = [
    "Firestore", "Firebase"
]
+++

## Firestore Rules

This Firestore security rules code controls access to the data in your Firestore database, setting permissions for both reading and writing.

Let's go through the following and explain it:
```
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Autoriser la lecture à tout le monde, mais l'écriture uniquement aux utilisateurs authentifiés
    match /{document=**} {
      allow read: if true;  // Tout le monde peut lire
      allow write: if request.auth != null;  // Écriture uniquement pour les utilisateurs authentifiés
    }
  }
}
```

First: 
```
rules_version = '2';
```
This specifies that the rules are written using version 2 of the Firestore security rules. Each version may have differences in available features and syntax.

```
service cloud.firestore {
  match /databases/{database}/documents {
```
Here, we define the security rules for a Firestore database. The service `cloud.firestore` line indicates these rules apply to Firestore.

`match /databases/{database}/documents` tells Firestore to apply these rules to all databases (usually there is only one database per project) and to all documents within it.

### Defining Access Rules

The section inside `match /{document=**} { ... }` applies these rules to all documents at all levels within the Firestore database, thanks to the `{document=**}` syntax, which is a wildcard for all document paths.

```
allow read: if true;
```
`allow read: if true;` allows read access (both viewing and fetching documents) for anyone, whether they are authenticated or not. if true always evaluates to true, so any user, authenticated or not, can read the data.

```
allow write: if request.auth != null;
```
`allow write: if request.auth != null;` allows write access (creating, updating, or deleting documents) only if the user is authenticated. Here, `request.auth != null` checks if the request is made by a user who is logged in. If `request.auth` is null, that means the user is unauthenticated, and the write request will be denied.



